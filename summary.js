function Summary(audio) {

    this.audio = audio;

    var recorder;

    init()

    function init() {
        var imported = document.createElement('script');
        imported.src = '/RecordRTC.js';
        document.head.appendChild(imported);
    }

    function captureMicrophone(callback) {
        navigator.mediaDevices.getUserMedia({
            audio: true
        }).then(function(microphone) {
            callback(microphone);
        }).catch(function(error) {
            alert('Unable to capture your microphone. Please check console logs.');
            console.error(error);
        });
    }

    function startRecording(chunkCallback) {
        chunkCallback = chunkCallback || function() {};
        captureMicrophone(function(microphone) {
            audio.srcObject = microphone;

            recorder = RecordRTC(microphone, {
                type: 'audio',
                recorderType: StereoAudioRecorder,
                mimeType: 'audio/wav',
                timeSlice: 500,
                desiredSampRate: 16000,
                bufferSize: 8192,
                numberOfAudioChannels: 1,
                ondataavailable: function(blob) {
                    chunkCallback(blob)
                }
            });

            recorder.startRecording();

            // release microphone on stopRecording
            recorder.microphone = microphone;
        });
    }

    function stopRecording(callback) {
        callback = callback || function() {};
        recorder.stopRecording(function() {
            stopRecordingCallback()
            callback()
        });
    }

    function stopRecordingCallback() {
        // ------------------------------------------------------------
        // get access to StereoAudioRecorder object (name as "internal-recorder")
        // ------------------------------------------------------------
        var internalRecorder = recorder.getInternalRecorder();

        // ------------------------------------------------------------
        // get left and right audio channels
        // ------------------------------------------------------------
        var leftchannel = internalRecorder.leftchannel;
        var rightchannel = internalRecorder.rightchannel;

        // ------------------------------------------------------------
        // create your own WAV
        // ------------------------------------------------------------
        internalRecorder.stop(function(buffer, view) {
            // ------------------------------------------------------------
            // here is your own WAV (generated by your own codes)
            // ------------------------------------------------------------
            var blob = new Blob([buffer], {
                type: 'audio/wav'
            });
            audio.srcObject = null;
            audio.src = URL.createObjectURL(blob);
        });

        recorder.microphone.stop();
    }

    return {
        "startRecording": startRecording,
        "stopRecording": stopRecording
    }
}